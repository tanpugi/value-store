#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require('../app');
var appProps = require("../app-properties");
var logger = require("../utils/logutil");
var http = require('http');

/**
 * Get port from environment/properties and store in Express.
 */
const serverProps = appProps.server;
const port = normalizePort(serverProps.port || process.env.PORT);
app.set('port', port);

/**
 * Create HTTP server.
 */
let appIntervalCount = 0;
let server;
const appInterval = setInterval(function() {
  if (app.locals.ready || appIntervalCount > 5) {
    /**
     * Setting up server.
     */
    logger.info("Setting up server.");
    server = http.createServer(app);
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
    clearInterval(appInterval);
    return;
  } else {
    appIntervalCount++;
  }
}, 1000);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.info('Server started. Listening on ' + bind);
}
